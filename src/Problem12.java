import java.util.TreeSet;

/**
 * @author Anthony Gargiulo
 * @version 1.0
 *          Euler Project
 *          Problem 12
 *          ---------
 *          The sequence of triangle numbers is generated by adding the natural
 *          numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 +
 *          7 = 28. The first ten terms would be:
 *          1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *          Let us list the factors of the first seven triangle numbers:
 *          1: 1
 *          3: 1,3
 *          6: 1,2,3,6
 *          10: 1,2,5,10
 *          15: 1,3,5,15
 *          21: 1,3,7,21
 *          28: 1,2,4,7,14,28
 *          We can see that 28 is the first triangle number to have over five
 *          divisors.
 *          What is the value of the first triangle number to have over five
 *          hundred divisors?
 */

public class Problem12
{
    /**
     * the current triangle number
     */
    static long curTriNum   = 0;

    /**
     * 
     */
    static long triNumIndex = 1;

    /**
     * @param args
     */
    public static void main(String[] args)
    {
        TreeSet<Long> factors;
        do
        {
            getNextTriNum();
            factors = getFactors(curTriNum);

        } while (factors.size() <= 500);
        System.out.println(curTriNum);

    }

    /**
     * @param number
     * @return the list of factors
     */
    private static TreeSet<Long> getFactors(long number)
    {
        TreeSet<Long> factors = new TreeSet<Long>();
        for (long f = 1; f <= Math.sqrt(number); f++)
        {
            if (number % f == 0)
            {
                factors.add(f);
            }
        }
        TreeSet<Long> factors2 = new TreeSet<Long>();
        for (long l : factors)
        {
            factors2.add(number / l);
        }
        factors.addAll(factors2);
        return factors;
    }

    /**
     * 
     */
    private static void getNextTriNum()
    {
        curTriNum += triNumIndex;
        triNumIndex++;

    }

}
